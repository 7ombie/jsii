
    {x: 4, y: 5, z, __proto__: Bar}
    {__proto__: Array, (Object), name: "Bob", salary: 20000}

foo[1 + 2]
bar(1, 2, 3 + 3)
(1 + 2) * (2, 3, 4)

spam.com """
    line 1
        `line 2` ${ foo }
    line 3 (indented a bit) \(1, 2, 3)
    """

x == 4
y != z

if p0 { foo } else if p1 { bar } else { spam }

do async function { return await true }
do async generator { return await yield true }
do async lambda { return await true }

html.tag "
line one: onside
  line two: indented \(1, 2, 3) spaces    
line three: onside again
"

x == freeze 1
spam != green.eggs and ham

foo!bar?spam.eggs

theory is String
theory is not String

foo: if expression { break foo }

async function f { await call() }

generator foo { yield }
generator foo { return }

"outer: \(  "inner: \(  "innermost: \(boogie + woogie, 100 * 45)"  ) 2"  )"

generator {
    dance: while x while y {
        o is packed
        o is sealed
        o is frozen
        if o is not packed yield 1
        o is not sealed
        o is not frozen
        function { moves: for thing from otherThing { break moves } }
    }
}

for each in range { breakfast() }

function (foo) of x, y { return 1 }
function foo of x, y { return 1 }
function of x, y { return 1 }
throw new Foo()
dev if x { Y }
dev 1 + 2 * 3 + 3
pack new foo(x, y, z)
seal new foo
freeze 1 + 2 when x * y else spam + eggs
lambda x, y, args... { return x + y / args }

