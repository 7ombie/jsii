do async function { return await true }
do async generator { return await yield true }
do async lambda { return await true }

10011100.11.toFixed(5)

x == freeze 1
spam != green.eggs and ham

foo!bar?spam.eggs

theory is String
theory is not String

foo: if expression { break foo }

async function f { await call() }

generator foo { yield }
generator foo { return }

# "outer: \(  "inner: \(  "innermost: \(boogie + woogie, 100 * 45)"  ) 2"  ) 1"       # TODO: test again

generator {
    dance: while x while y {
        o is packed
        o is sealed
        o is frozen
        if o is not packed yield 1
        o is not sealed
        o is not frozen
        function { moves: for thing from otherThing { break moves } }
    }
}

for each in range { breakfast() }

function (foo) of x, y { return 1 }
function foo of x, y { return 1 }
function of x, y { return 1 }
throw new Foo()
dev if x { Y }
dev 1 + 2 * 3 + 3
pack new foo(x, y, z)
seal new foo
freeze 1 + 2 when x * y else spam + eggs
lambda x, y, args... { return x + y / args }

