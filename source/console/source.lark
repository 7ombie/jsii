let foo = thing
lets = [x, y, {foo, bar, spam: x, [z], __proto__: Number}, x] = foo
[x, y, {foo, bar, spam: x, [z], [spam, eggs, ...foo], ...o }, ...f] = options

[]
{}
{[]}
{{}}

{foo: 1, bar: 2, metavars...}
point = {x: 1, y: 2}
{ali, bob, cal, ...others} = people
{__proto__: Array, length: 2, 0: false, 1: true}
{__proto__: Object, name: "John", salary: 50000}
john = {__proto__: Object, name: "John", salary: 50000}

{[a, b, c, __proto__...]}
{{__proto__: Player, score: 0, lives: 3, gameObject...}}

let map = {{y: 2, __proto__: Array, foo: bar}}
var array = [1, 2, 3]
var object = {x: 45, boo: 56, __proto__: Object}
let index = x[x]

{__proto__: Array, x: 1, y: 2, z: 3, ...foo} = obj

{x, foo, bar, pop, pip: 345, ...z} = options

delete foo.bar
delete foo["bar"]
delete foo[bar][10]
delete foo.bar.spam.eggs
delete foo.bar

"spam \(1, 2, 3) eggs"

(do for item in items {
    if item.meets(requirements) { item0, item1 }
    spam
    eggs
})

x[1] in foo()
x not in y

results = do function of x, y = 56 {
    x * y
    yield x + y
}

spamEggs = do {
    foo + bar
    return spam + eggs
}

do { yield from results }

do if item.meets(requirements) {
    item0
    yield item1
}

do while x > y { x -= 1, return y }

function f { return true }.bind(fish)

function j of x, y, z { yield false }
async function spam { return 1 }
async function of args { yield 1 }

await foo()

"foobar \("()")"

"outer: \("inner: \( "innermost: \(boogie + woogie, 100 * 45)^^^"  ) 2"  )"

spam.com """
    line 1
        `line 2` ${ foo } (indented four spaces)
    \(1, 2, 3)
    line 4
    """

html.tag "
line one: onside
  line two: indented \(1, 2) spaces    
line three: onside \(3, 4, 5) again
"

for each in range { breakfast(), while x > y { console.log(dude) }, while x > y { console.log(dude) } }
for each of (range) {
    breakfast(), break
    while x > y { console.log(dude), break }
}
for each on foo.bar { breakfast() }
for each from spam() { breakfast() }
for [index, value] in array... { put(index, value) }

while x > y { console.log(dude) }

puss in boots
puss of boots
puss on boots

{x: 4, y: 5, z, __proto__: Bar}
{__proto__: Array, name: "Bob", salary: 20000}

foo[1 + 2]
bar(1, 2, 3 + 3)
(1 on 2) * (not 2)

x == 4
y != z

if p0 { foo } else if p1 { bar } else { spam }

do async function { return await true }

google == alphabet
spam != green.eggs and ham

foo!bar?spam.eggs

theory is String
theory is not String

foo: while expression { break foo, continue foo }

function foo { yield from something }
function bar of args { yield somethingElse }

function {
    dance: while x while y {
        o is packed
        o is sealed
        o is frozen
        if x {
            if o is not packed yield from 1
        }
        o is not sealed
        o is not frozen
        function { moves: for thing in otherThing { break moves } }
    }
}

throw Foo("spam and eggs")
dev if x { Y }
dev 1 + 2 * 3 + 3
pack new Foo(x, y, z)
seal new Bar(spam, eggs) + foo
freeze 1 + 2 when x * y else spam + eggs

28n
4.3K
0x300M
14px
12.345em
0b10101111mm
26p
34.3T
12vh
12.3vmax

28//3 / 43
4.3\\10 \ 4
300//3 % 5
1434.435\\45 - 1

options = {[foo, bar, rest...]}
moreOptions = {{foo: 1, bar: 2, map: map}}
[x, y, ...z] = foo
{x, y, z} = bar
a[1] *= 1

a = [1, 2, x...]
h = {x: 1, y: 2, players...}
o = {__proto__: Object, x: 1, y: 2, z: 3, __photo__: spam}
s = {[1, 2, 3]}
m = {{true: 1, false: 2, spam.eggs[1]: 3}}
f(1, 2, 3)
{{}}
{[]}

for n in m.s... { n }
fs = {[foo, bar, rest...]}
es = {[x...]}
fm = {{foo: 1, bar: 2, map..., spam: 90}}
em = {{y..., z...}}
{{}}
{[]}
[]
{x, y, z} = foo
[1, 2, 3] = bar
{x: 1, y: 2}
{{y: 2, __proto__: Array, foo: bar}}


while true continue

[]
{}
{[]}
{{x: 1}}


{foo: 1, bar: 2, metavars.x...}
point = {x: 1, y: 2}
{ali, bob, cal, ...others} = people
{__proto__: Array, length: 2, 0: false, 1: true}
{__proto__: Object, name: "John", salary: 50000}
john = {__proto__: Object, name: "John", salary: 50000}

{[a, b, c, d...]}
{{__proto__: Player, score: 0, lives: 3, gameObject...}}

theory is String
theory is not String

theory.com() is Types[1]
conspiracy_theory is not Types[20 * 8.x]

0xFF.toString(16)
